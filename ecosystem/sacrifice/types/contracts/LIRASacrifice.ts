/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace LIRASacrifice {
  export type SacrificeRoundStruct = {
    bonus: PromiseOrValue<BigNumberish>;
    sacrified: PromiseOrValue<BigNumberish>;
    start: PromiseOrValue<BigNumberish>;
    end: PromiseOrValue<BigNumberish>;
  };

  export type SacrificeRoundStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    bonus: BigNumber;
    sacrified: BigNumber;
    start: BigNumber;
    end: BigNumber;
  };

  export type SacrificeStruct = {
    owner: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    redeemed: PromiseOrValue<boolean>;
  };

  export type SacrificeStructOutput = [string, BigNumber, boolean] & {
    owner: string;
    amount: BigNumber;
    redeemed: boolean;
  };
}

export interface LIRASacrificeInterface extends utils.Interface {
  functions: {
    "_rounds(uint256)": FunctionFragment;
    "count()": FunctionFragment;
    "redeem(address)": FunctionFragment;
    "redeemToken()": FunctionFragment;
    "renounceShamanship()": FunctionFragment;
    "round()": FunctionFragment;
    "sacrificable()": FunctionFragment;
    "sacrificableAmount()": FunctionFragment;
    "sacrifice(uint256)": FunctionFragment;
    "sacrifices()": FunctionFragment;
    "sacrifiedToken()": FunctionFragment;
    "shaman()": FunctionFragment;
    "start(address,address,uint256[],uint256,uint256)": FunctionFragment;
    "started()": FunctionFragment;
    "transferShamanship(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_rounds"
      | "count"
      | "redeem"
      | "redeemToken"
      | "renounceShamanship"
      | "round"
      | "sacrificable"
      | "sacrificableAmount"
      | "sacrifice"
      | "sacrifices"
      | "sacrifiedToken"
      | "shaman"
      | "start"
      | "started"
      | "transferShamanship"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_rounds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceShamanship",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "round", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sacrificable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sacrificableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sacrifice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sacrifices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sacrifiedToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "shaman", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "start",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "started", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferShamanship",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "_rounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceShamanship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "round", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sacrificable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sacrificableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sacrifice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sacrifices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sacrifiedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shaman", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "started", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferShamanship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Redeemed(uint256,uint256)": EventFragment;
    "Sacrified(uint256,uint256)": EventFragment;
    "ShamanshipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sacrified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShamanshipTransferred"): EventFragment;
}

export interface RedeemedEventObject {
  sacrifice_: BigNumber;
  amount_: BigNumber;
}
export type RedeemedEvent = TypedEvent<
  [BigNumber, BigNumber],
  RedeemedEventObject
>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

export interface SacrifiedEventObject {
  owner_: BigNumber;
  amount_: BigNumber;
}
export type SacrifiedEvent = TypedEvent<
  [BigNumber, BigNumber],
  SacrifiedEventObject
>;

export type SacrifiedEventFilter = TypedEventFilter<SacrifiedEvent>;

export interface ShamanshipTransferredEventObject {
  previousShaman: string;
  newShaman: string;
}
export type ShamanshipTransferredEvent = TypedEvent<
  [string, string],
  ShamanshipTransferredEventObject
>;

export type ShamanshipTransferredEventFilter =
  TypedEventFilter<ShamanshipTransferredEvent>;

export interface LIRASacrifice extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LIRASacrificeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bonus: BigNumber;
        sacrified: BigNumber;
        start: BigNumber;
        end: BigNumber;
      }
    >;

    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeem(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemToken(overrides?: CallOverrides): Promise<[string]>;

    renounceShamanship(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    round(
      overrides?: CallOverrides
    ): Promise<
      [LIRASacrifice.SacrificeRoundStructOutput] & {
        round_: LIRASacrifice.SacrificeRoundStructOutput;
      }
    >;

    sacrificable(overrides?: CallOverrides): Promise<[BigNumber]>;

    sacrificableAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    sacrifice(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sacrifices(
      overrides?: CallOverrides
    ): Promise<
      [LIRASacrifice.SacrificeStructOutput[]] & {
        sacrifices_: LIRASacrifice.SacrificeStructOutput[];
      }
    >;

    sacrifiedToken(overrides?: CallOverrides): Promise<[string]>;

    shaman(overrides?: CallOverrides): Promise<[string]>;

    start(
      sacrifiedToken_: PromiseOrValue<string>,
      redeemToken_: PromiseOrValue<string>,
      bonuses_: PromiseOrValue<BigNumberish>[],
      duration_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    started(
      overrides?: CallOverrides
    ): Promise<[boolean] & { started_: boolean }>;

    transferShamanship(
      newShaman: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _rounds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bonus: BigNumber;
      sacrified: BigNumber;
      start: BigNumber;
      end: BigNumber;
    }
  >;

  count(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemToken(overrides?: CallOverrides): Promise<string>;

  renounceShamanship(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  round(
    overrides?: CallOverrides
  ): Promise<LIRASacrifice.SacrificeRoundStructOutput>;

  sacrificable(overrides?: CallOverrides): Promise<BigNumber>;

  sacrificableAmount(overrides?: CallOverrides): Promise<BigNumber>;

  sacrifice(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sacrifices(
    overrides?: CallOverrides
  ): Promise<LIRASacrifice.SacrificeStructOutput[]>;

  sacrifiedToken(overrides?: CallOverrides): Promise<string>;

  shaman(overrides?: CallOverrides): Promise<string>;

  start(
    sacrifiedToken_: PromiseOrValue<string>,
    redeemToken_: PromiseOrValue<string>,
    bonuses_: PromiseOrValue<BigNumberish>[],
    duration_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  started(overrides?: CallOverrides): Promise<boolean>;

  transferShamanship(
    newShaman: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    to_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bonus: BigNumber;
        sacrified: BigNumber;
        start: BigNumber;
        end: BigNumber;
      }
    >;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemToken(overrides?: CallOverrides): Promise<string>;

    renounceShamanship(overrides?: CallOverrides): Promise<void>;

    round(
      overrides?: CallOverrides
    ): Promise<LIRASacrifice.SacrificeRoundStructOutput>;

    sacrificable(overrides?: CallOverrides): Promise<BigNumber>;

    sacrificableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    sacrifice(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sacrifices(
      overrides?: CallOverrides
    ): Promise<LIRASacrifice.SacrificeStructOutput[]>;

    sacrifiedToken(overrides?: CallOverrides): Promise<string>;

    shaman(overrides?: CallOverrides): Promise<string>;

    start(
      sacrifiedToken_: PromiseOrValue<string>,
      redeemToken_: PromiseOrValue<string>,
      bonuses_: PromiseOrValue<BigNumberish>[],
      duration_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    started(overrides?: CallOverrides): Promise<boolean>;

    transferShamanship(
      newShaman: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Redeemed(uint256,uint256)"(
      sacrifice_?: null,
      amount_?: null
    ): RedeemedEventFilter;
    Redeemed(sacrifice_?: null, amount_?: null): RedeemedEventFilter;

    "Sacrified(uint256,uint256)"(
      owner_?: null,
      amount_?: null
    ): SacrifiedEventFilter;
    Sacrified(owner_?: null, amount_?: null): SacrifiedEventFilter;

    "ShamanshipTransferred(address,address)"(
      previousShaman?: PromiseOrValue<string> | null,
      newShaman?: PromiseOrValue<string> | null
    ): ShamanshipTransferredEventFilter;
    ShamanshipTransferred(
      previousShaman?: PromiseOrValue<string> | null,
      newShaman?: PromiseOrValue<string> | null
    ): ShamanshipTransferredEventFilter;
  };

  estimateGas: {
    _rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemToken(overrides?: CallOverrides): Promise<BigNumber>;

    renounceShamanship(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    round(overrides?: CallOverrides): Promise<BigNumber>;

    sacrificable(overrides?: CallOverrides): Promise<BigNumber>;

    sacrificableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    sacrifice(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sacrifices(overrides?: CallOverrides): Promise<BigNumber>;

    sacrifiedToken(overrides?: CallOverrides): Promise<BigNumber>;

    shaman(overrides?: CallOverrides): Promise<BigNumber>;

    start(
      sacrifiedToken_: PromiseOrValue<string>,
      redeemToken_: PromiseOrValue<string>,
      bonuses_: PromiseOrValue<BigNumberish>[],
      duration_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    started(overrides?: CallOverrides): Promise<BigNumber>;

    transferShamanship(
      newShaman: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceShamanship(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    round(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sacrificable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sacrificableAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sacrifice(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sacrifices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sacrifiedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shaman(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(
      sacrifiedToken_: PromiseOrValue<string>,
      redeemToken_: PromiseOrValue<string>,
      bonuses_: PromiseOrValue<BigNumberish>[],
      duration_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    started(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferShamanship(
      newShaman: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
